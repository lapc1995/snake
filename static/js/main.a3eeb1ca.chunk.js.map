{"version":3,"sources":["serviceWorker.js","SnakeGame.js","RattleSnake.js","index.js"],"names":["Boolean","window","location","hostname","match","SnakeGame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","map","snake","x","y","keyPressed","canRender","onKeyPressed","bind","assertThisInitialized","map_aux","Array","size","i","j","snake_aux","position","getFoodPosition","gameVars","setGame","setState","foodSet","Math","floor","random","length","oldX","oldY","eatFood","tempX","tempY","push","_this2","startGame","intervalID","setInterval","tick","document","addEventListener","clearInterval","removeEventListener","updateSnakePosition","e","key","scale","result","line","react_default","a","createElement","width","height","style","fill","React","Component","RattleSnake","updateWindowDimensions","innerWidth","innerHeight","container","video","game","top","left","ReactPlayer_default","url","playing","loop","src_SnakeGame","ReactDOM","render","src_RattleSnake","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3eeb1ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nclass SnakeGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            map : null,\r\n            snake: [{x: 10, y: 10}],\r\n            keyPressed: 'ArrowLeft',\r\n            canRender: false,\r\n        }\r\n        this.onKeyPressed = this.onKeyPressed.bind(this);\r\n    }\r\n\r\n    setGame() {\r\n        var map_aux = Array(this.props.size);\r\n        for(var i = 0; i < this.props.size; i++) {\r\n            map_aux[i] = Array(this.props.size);\r\n            for(var j = 0; j < this.props.size; j++) {\r\n                map_aux[i][j] = 0;\r\n            }\r\n        }\r\n\r\n        var snake_aux = Array(1);\r\n        snake_aux[0] = {x: 10, y: 10};\r\n        map_aux[snake_aux[0].y][snake_aux[0].x] = 1;\r\n\r\n        var position = this.getFoodPosition(map_aux);\r\n        map_aux[position.y][position.x] = 2;\r\n        \r\n        return {map: map_aux, snake: snake_aux}\r\n    }\r\n\r\n    startGame() {\r\n        var gameVars = this.setGame();\r\n        this.setState({\r\n            map: gameVars.map,\r\n            snake: gameVars.snake,\r\n            canRender:true\r\n        })\r\n    }\r\n\r\n    getFoodPosition(map) {\r\n        var foodSet = false;\r\n        var x = 0;\r\n        var y = 0;\r\n        while(!foodSet) {\r\n            x = Math.floor((Math.random() * this.props.size) + 0);\r\n            y = Math.floor((Math.random() * this.props.size) + 0);\r\n            if(map[y][x] === 0)\r\n                foodSet = true;\r\n        }\r\n        return {x: x, y: y}\r\n    }\r\n\r\n    updateSnakePosition() {\r\n\r\n        //copy snake\r\n        var snake_aux = Array(this.state.snake.length);\r\n        for(var i = 0; i < snake_aux.length; i++) {\r\n            snake_aux[i] = {x: this.state.snake[i].x, y: this.state.snake[i].y};\r\n        }\r\n\r\n        //copy map\r\n        var map_aux = Array(this.props.size);\r\n        for(i = 0; i < this.props.size; i++) {\r\n            map_aux[i] = Array(this.props.size);\r\n            for(var j = 0; j < this.props.size; j++) {\r\n                map_aux[i][j] = this.state.map[i][j];\r\n            }\r\n        }\r\n\r\n        var oldX = snake_aux[0].x;\r\n        var oldY = snake_aux[0].y;\r\n\r\n        if(this.state.keyPressed === 'ArrowUp') {\r\n            snake_aux[0].y = snake_aux[0].y - 1;\r\n            if(snake_aux[0].y < 0)\r\n                snake_aux[0].y = this.props.size-1;\r\n        } else if(this.state.keyPressed === 'ArrowDown') {\r\n            snake_aux[0].y = snake_aux[0].y + 1;\r\n            if(snake_aux[0].y >= this.props.size)\r\n                snake_aux[0].y = 0;\r\n        } else if(this.state.keyPressed === 'ArrowLeft') {\r\n            snake_aux[0].x = snake_aux[0].x - 1;\r\n            if(snake_aux[0].x < 0) \r\n                snake_aux[0].x = this.props.size-1;\r\n        } else if(this.state.keyPressed === 'ArrowRight') {\r\n            snake_aux[0].x = snake_aux[0].x + 1;\r\n            if(snake_aux[0].x >= this.props.size) \r\n                snake_aux[0].x = 0;\r\n        }\r\n\r\n        var eatFood = false;\r\n\r\n        if(map_aux[snake_aux[0].y][snake_aux[0].x] === 1) {\r\n            var gameVars = this.setGame();\r\n            snake_aux = gameVars.snake;\r\n            map_aux = gameVars.map;\r\n        } else if(map_aux[snake_aux[0].y][ snake_aux[0].x] === 2) {\r\n            eatFood = true;\r\n            var position = this.getFoodPosition(map_aux);\r\n            map_aux[position.y][position.x] = 2;\r\n        }\r\n        \r\n        map_aux[snake_aux[0].y][ snake_aux[0].x] = 1;\r\n        \r\n        for(i = 1; i < snake_aux.length; i++) {\r\n            var tempX = snake_aux[i].x;\r\n            var tempY = snake_aux[i].y;\r\n\r\n            snake_aux[i].x = oldX;\r\n            snake_aux[i].y = oldY;\r\n            map_aux[oldY][oldX] = 1;\r\n\r\n            oldX = tempX;\r\n            oldY = tempY;\r\n        }\r\n\r\n        if(eatFood) {\r\n            snake_aux.push({x:oldX, y: oldY});\r\n            map_aux[oldY][oldX] = 1;\r\n        } else {\r\n            map_aux[oldY][oldX] = 0;\r\n        }\r\n        \r\n        this.setState({\r\n            snake: snake_aux,\r\n            map: map_aux\r\n          });\r\n       \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startGame();\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            50\r\n        );\r\n        document.addEventListener(\"keydown\", this.onKeyPressed, false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n        document.removeEventListener(\"keydown\", this.onKeyPressed, false);\r\n    }\r\n\r\n    tick() {\r\n       this.updateSnakePosition();\r\n    }\r\n\r\n    onKeyPressed(e) {\r\n        if( (this.state.snake.length > 1 && \r\n                !((e.key === 'ArrowUp' && this.state.keyPressed === 'ArrowDown') || \r\n                 (e.key === 'ArrowDown' && this.state.keyPressed === 'ArrowUp') ||\r\n                 (e.key === 'ArrowRight' && this.state.keyPressed === 'ArrowLeft') ||\r\n                 (e.key === 'ArrowLeft' && this.state.keyPressed === 'ArrowRight'))\r\n            ) || this.state.snake.length === 1)\r\n               this.setState({keyPressed: e.key});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.canRender) {\r\n            var size = this.props.scale * 10;\r\n            var result = Array(this.props.size);\r\n            var key = 0;\r\n            for(var i = 0; i < this.props.size; i++) {\r\n                var line = Array(this.props.size);\r\n                for(var j = 0; j < this.props.size; j++) {\r\n                    if(this.state.map[i][j] === 0){\r\n                        line[j] = <svg key={key} width={size} height={size}>\r\n                                    <rect width={size} height={size} style={{fill:\"rgb(0,0,0,0)\"}} />\r\n                                  </svg>\r\n                    } else if(this.state.map[i][j] === 1) {\r\n                        line[j] = <svg key={key} width={size} height={size}>\r\n                                    <rect width={size} height={size} style={{fill:\"rgb(0,255,0)\"}} />\r\n                                  </svg>\r\n                    } else if(this.state.map[i][j] === 2) {\r\n                        line[j] = <svg key={key} width={size} height={size}>\r\n                                    <rect width={size} height={size} style={{fill:\"rgb(255,0,0)\"}} />\r\n                                  </svg>\r\n                    }\r\n                    key++; \r\n                }\r\n                result[i] = (<div key={i*1000} style={{height: size + 'px'}}>{line}</div>);\r\n            }\r\n            return (<div>{result}</div>);\r\n        }\r\n        return (<div></div>);\r\n    }\r\n}\r\n\r\nexport default SnakeGame;","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport SnakeGame from './SnakeGame';\r\n\r\nclass RattleSnake extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { width: 0, height: 0 };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n      \r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    \r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n\r\n        var size = 30;\r\n        var scale = 2;\r\n\r\n        const container = {\r\n            position: 'relative',\r\n            width: this.state.width + 'px',\r\n            height: this.state.height - 4 + 'px',\r\n            \r\n          }\r\n        const video = {\r\n            width:this.state.width + 'px',\r\n            height:this.state.height - 4 + 'px',\r\n          }\r\n    \r\n        const game= {\r\n            position: 'absolute',\r\n            top: this.state.height/2 - ((size * scale *10)/2) + 'px',\r\n            left:this.state.width/2 - ((size * scale *10)/2) + 'px',\r\n          }\r\n\r\n        return(<div style={container}>\r\n            <div style={video}>\r\n                <ReactPlayer \r\n                    url='https://www.youtube.com/watch?v=Q-i1XZc8ZwA' \r\n                    playing \r\n                    loop  \r\n                    width='100%'\r\n                    height='100%'\r\n                />\r\n            </div>\r\n            <div style={game}>\r\n                <SnakeGame size={size} scale={scale} />\r\n            </div>\r\n       </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RattleSnake;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SnakeGame from './SnakeGame';\nimport RattleSnake from './RattleSnake';\n\nReactDOM.render(<RattleSnake size='30' scale='1'/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}