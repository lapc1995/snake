{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","Snake","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","map","snake","x","y","keyPressed","onKeyPressed","bind","assertThisInitialized","m","Array","size","i","fill","Math","floor","random","setState","snake_aux","length","map_aux","j","oldX","oldY","eatFood","tempX","tempY","push","_this2","intervalID","setInterval","tick","document","addEventListener","clearInterval","removeEventListener","updateSnakePosition","e","key","result","line","react_default","a","createElement","width","height","style","React","Screen","_this3","updateWindowDimensions","innerWidth","innerHeight","container","position","video","game","top","left","ReactPlayer_default","url","playing","loop","src_Snake","ReactDOM","render","src_Screen","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c163faa2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactPlayer from 'react-player';\n\nclass Snake extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            map : null,\n            snake: [{x: 10, y: 10}],\n            keyPressed: 'ArrowLeft',\n        }\n        this.onKeyPressed = this.onKeyPressed.bind(this);\n\n        var m = Array(this.props.size);\n        for(var i = 0; i < this.props.size; i++) {\n            m[i] = Array(this.props.size).fill(0);\n        }\n\n        var x = Math.floor((Math.random() * this.props.size-1) + 0);\n        var y = Math.floor((Math.random() * this.props.size-1) + 0);\n        m[y][x] = 2;\n\n        this.state.map = m;\n\n\n\n        this.setState({\n            \n        })\n    }\n\n    updateSnakePosition() {\n\n        //copy snake\n        var snake_aux = Array(this.state.snake.length);\n        for(var i = 0; i < snake_aux.length; i++) {\n            snake_aux[i] = {x: this.state.snake[i].x, y: this.state.snake[i].y};\n        }\n\n        //copy map\n        var map_aux = Array(this.props.size);\n        for(var i = 0; i < this.props.size; i++) {\n            map_aux[i] = Array(this.props.size);\n            for(var j = 0; j < this.props.size; j++) {\n                map_aux[i][j] = this.state.map[i][j];\n            }\n        }\n\n        var oldX = snake_aux[0].x;\n        var oldY = snake_aux[0].y;\n\n        if(this.state.keyPressed == 'ArrowUp') {\n            snake_aux[0].y = snake_aux[0].y - 1;\n            if(snake_aux[0].y < 0)\n                snake_aux[0].y = this.props.size-1;\n        } else if(this.state.keyPressed == 'ArrowDown') {\n            snake_aux[0].y = snake_aux[0].y + 1;\n            if(snake_aux[0].y >= this.props.size)\n                snake_aux[0].y = 0;\n        } else if(this.state.keyPressed == 'ArrowLeft') {\n            snake_aux[0].x = snake_aux[0].x - 1;\n            if(snake_aux[0].x < 0) \n                snake_aux[0].x = this.props.size-1;\n        } else if(this.state.keyPressed == 'ArrowRight') {\n            snake_aux[0].x = snake_aux[0].x + 1;\n            if(snake_aux[0].x >= this.props.size) \n                snake_aux[0].x = 0;\n        }\n\n        var eatFood = false;\n\n        if(map_aux[snake_aux[0].y][snake_aux[0].x] == 1) {\n            map_aux = Array(this.props.size);\n            for(var i = 0; i < this.props.size; i++) {\n                map_aux[i] = Array(this.props.size).fill(0);\n            }\n\n            var x = Math.floor((Math.random() * this.props.size-1) + 0);\n            var y = Math.floor((Math.random() * this.props.size-1) + 0);\n            map_aux[y][x] = 2;\n            snake_aux = Array(1);\n            snake_aux[0] = {x: 10, y: 10};\n        }\n\n        if(map_aux[snake_aux[0].y][ snake_aux[0].x] == 2) {\n            eatFood = true;\n            var x = Math.floor((Math.random() * this.props.size-1) + 0);\n            var y = Math.floor((Math.random() * this.props.size-1) + 0);\n            map_aux[y][x] = 2;\n        }\n        \n        map_aux[snake_aux[0].y][ snake_aux[0].x] = 1;\n        \n        for(var i = 1; i < snake_aux.length; i++) {\n            var tempX = snake_aux[i].x;\n            var tempY = snake_aux[i].y;\n\n            snake_aux[i].x = oldX;\n            snake_aux[i].y = oldY;\n            map_aux[oldY][oldX] = 1;\n\n            oldX = tempX;\n            oldY = tempY;\n        }\n\n        if(eatFood) {\n            snake_aux.push({x:oldX, y: oldY});\n            map_aux[oldY][oldX] = 1;\n        } else {\n            map_aux[oldY][oldX] = 0;\n        }\n        \n        this.setState({\n            snake: snake_aux,\n            map: map_aux\n          });\n       \n    }\n\n    componentDidMount() {\n        this.intervalID = setInterval(\n            () => this.tick(),\n            50\n        );\n        document.addEventListener(\"keydown\", this.onKeyPressed, false);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n        document.removeEventListener(\"keydown\", this.onKeyPressed, false);\n    }\n\n    tick() {\n       this.updateSnakePosition();\n    }\n\n    onKeyPressed(e) {\n        if( (this.state.snake.length > 1 && \n                !((e.key == 'ArrowUp' && this.state.keyPressed == 'ArrowDown') || \n                 (e.key == 'ArrowDown' && this.state.keyPressed == 'ArrowUp') ||\n                 (e.key == 'ArrowRight' && this.state.keyPressed == 'ArrowLeft') ||\n                 (e.key == 'ArrowLeft' && this.state.keyPressed == 'ArrowRight'))\n            ) || this.state.snake.length == 1)\n               this.setState({keyPressed: e.key});\n    }\n\n    render() {\n       \n        var result = Array(this.props.size);\n        for(var i = 0; i < this.props.size; i++) {\n            var line = Array(this.props.size);\n            for(var j = 0; j < this.props.size; j++) {\n                if(this.state.map[i][j] == 1) {\n                    line[j] = <svg width=\"10\" height=\"10\">\n                                <rect width=\"10\" height=\"10\" style={{fill:\"rgb(0,255,0)\"}} />\n                                </svg>\n                } else if(this.state.map[i][j] == 2) {\n                    line[j] = <svg width=\"10\" height=\"10\">\n                                <rect width=\"10\" height=\"10\" style={{fill:\"rgb(255,0,0)\"}} />\n                                </svg>\n                } else {\n                    line[j] = <svg width=\"10\" height=\"10\">\n                                <rect width=\"10\" height=\"10\" style={{fill:\"rgb(0,0,255)\"}} />\n                                </svg>\n                }\n            }\n            result[i] = (<div style={{height:'10px'}}>{line}</div>);\n        }\n        return (<div>{result}</div>);\n    }\n}\n\nclass Screen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { width: 0, height: 0 };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n      \n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n    \n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    render() {\n        const container = {\n            position: 'relative',\n            width: this.state.width + 'px',\n            height: this.state.height - 4 + 'px',\n            \n          }\n        const video = {\n            width:this.state.width + 'px',\n            height:this.state.height - 4 + 'px',\n          }\n    \n        const game= {\n            position: 'absolute',\n            top: this.state.height/2 - 150 + 'px',\n            left:this.state.width/2 - 150 + 'px',\n          }\n\n        return(<div style={container}>\n            <div style={video}>\n                <ReactPlayer \n                    url='https://www.youtube.com/watch?v=Q-i1XZc8ZwA' \n                    playing \n                    loop  \n                    width='100%'\n                    height='100%'\n                />\n            </div>\n            <div style={game}>\n                <Snake size='30' />\n            </div>\n       </div>\n      );\n}\n    }\n\n\n    \n\n\n\nReactDOM.render(<Screen/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}